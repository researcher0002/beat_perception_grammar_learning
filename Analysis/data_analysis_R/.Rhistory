} else if (model == "M3") { ifelse(code == 4, 2, 1)
} else if (model == "M4") { ifelse(code <= 2, 1, 2)
} else if (model == "M5") { ifelse(code <= 2, 1, ifelse(code == 3, 2, 3))
} else if (model == "M6") { ifelse(code == 1, 1, ifelse(code == 2, 2, 3))
} else if (model == "M7") { ifelse(code == 1, 1, ifelse(code %in% c(2, 3), 2, 3))
} else if (model == "M8") { code
} else { NA_integer_ }
}
plot_df <- design %>%
mutate(level = purrr::map2_int(as.character(model), cond_code, assign_level)) %>%
mutate(condition = factor(condition, levels = names(cond_map)))  # B, R, RB-, RB+
# ----- Palette: one color per model -----
model_cols <- setNames(
c("#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#1f78b4"),
levels(plot_df$model)
)
# ----- Faceted dot plot (cleaned) -----
ggplot(plot_df, aes(x = condition, y = level, group = 1, color = model)) +
geom_line(linewidth = 0.9) +
geom_point(size = 3.6, stroke = 0.8) +
facet_grid(rows = vars(model), switch = "y") +
scale_y_continuous(
breaks = 1:4,
limits = c(0.8, 4.2),                    # a bit more headroom/footroom
expand  = expansion(mult = c(0.08, 0.12))# extra padding around levels
) +
scale_x_discrete(labels = c("B","R","RB-","RB+")) +
scale_color_manual(values = model_cols, guide = "none") +  # hide legend; 1 color per facet
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 13) +
theme(
strip.placement     = "outside",
strip.text.y.left   = element_text(angle = 0, face = "bold"),
panel.grid          = element_blank(),          # remove background lines
panel.spacing.y     = unit(10, "pt"),          # more space between facets
axis.text.x         = element_text(size = 12, colour = "black"),
axis.text.y         = element_text(size = 12, colour = "black"),
axis.title          = element_blank()
)
model_cols <- setNames(
c("#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#1f78b4"),
levels(plot_df$model)
)
# ----- Base plot -----
p <- ggplot(plot_df, aes(x = condition, y = level, group = 1, color = model)) +
# vertical separators between conditions
geom_vline(xintercept = c(1.5, 2.5, 3.5), color = "grey60", linewidth = 0.4) +
geom_line(linewidth = 0.9) +
geom_point(size = 3.6, stroke = 0.8) +
facet_grid(rows = vars(model), switch = "y") +
scale_y_continuous(
breaks = 1:4,
limits = c(0.8, 4.2),
expand  = expansion(mult = c(0.08, 0.12))
) +
scale_x_discrete(labels = c("B","R","RB-","RB+")) +
scale_color_manual(values = model_cols, guide = "none") +
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 13) +
theme(
strip.placement   = "outside",
strip.text.y.left = element_text(angle = 0, face = "bold"),
panel.grid        = element_blank(),
panel.spacing.y   = unit(0, "pt"),              # collapse panels tightly
panel.border      = element_rect(color = "grey60", fill = NA, linewidth = 0.5), # box each facet
axis.text.x       = element_text(size = 12, colour = "black"),
axis.text.y       = element_text(size = 12, colour = "black"),
axis.title        = element_blank()
)
p
design <- tidyr::crossing(models, conditions)
assign_level <- function(model, code){
if (model == "M1") { ifelse(code == 1, 1, 2)
} else if (model == "M2") { ifelse(code == 2, 1, 2)
} else if (model == "M3") { ifelse(code == 4, 2, 1)
} else if (model == "M4") { ifelse(code <= 2, 1, 2)
} else if (model == "M5") { ifelse(code <= 2, 1, ifelse(code == 3, 2, 3))
} else if (model == "M6") { ifelse(code == 1, 1, ifelse(code == 2, 2, 3))
} else if (model == "M7") { ifelse(code == 1, 1, ifelse(code %in% c(2, 3), 2, 3))
} else if (model == "M8") { code
} else { NA_integer_ }
}
plot_df <- design %>%
mutate(level = purrr::map2_int(as.character(model), cond_code, assign_level)) %>%
mutate(condition = factor(condition, levels = names(cond_map)))
# ----- Nicer color palette (Set2) -----
model_cols <- setNames(
brewer.pal(8, "Set2"),   # soft, distinct, print-friendly
levels(plot_df$model)
)
# ----- Base plot -----
p <- ggplot(plot_df, aes(x = condition, y = level, group = 1, color = model)) +
# vertical separators between conditions
geom_vline(xintercept = c(1.5, 2.5, 3.5), color = "grey70", linewidth = 0.4) +
geom_line(linewidth = 1) +
geom_point(size = 3.8, stroke = 0.9) +
facet_grid(rows = vars(model), switch = "y") +
scale_y_continuous(
breaks = 1:4,
limits = c(0.8, 4.2),
expand = expansion(mult = c(0.08, 0.12))
) +
scale_x_discrete(labels = c("B","R","RB-","RB+")) +
scale_color_manual(values = model_cols, guide = "none") +
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(
strip.placement   = "outside",
strip.text.y.left = element_text(angle = 0, face = "bold", size = 12),
panel.grid        = element_blank(),
panel.spacing.y   = unit(0, "pt"),
panel.border      = element_rect(color = "grey70", fill = NA, linewidth = 0.5),
axis.text.x       = element_text(size = 13, colour = "black"),
axis.text.y       = element_text(size = 13, colour = "black"),
axis.title        = element_blank()
)
p
# Packages
cond_map <- c("B" = 1, "R" = 2, "RB-" = 3, "RB+" = 4)
conditions <- enframe(cond_map, name = "condition", value = "cond_code")
# ----- Build tidy grid of Model × Condition -----
models <- tibble(
# reverse order: M8 (top) ... M1 (bottom)
model = factor(paste0("M", 8:1), levels = paste0("M", 8:1))
)
design <- tidyr::crossing(models, conditions)
# ----- Map each model to its level -----
assign_level <- function(model, code){
if (model == "M1") { ifelse(code == 1, 1, 2)
} else if (model == "M2") { ifelse(code == 2, 1, 2)
} else if (model == "M3") { ifelse(code == 4, 2, 1)
} else if (model == "M4") { ifelse(code <= 2, 1, 2)
} else if (model == "M5") { ifelse(code <= 2, 1, ifelse(code == 3, 2, 3))
} else if (model == "M6") { ifelse(code == 1, 1, ifelse(code == 2, 2, 3))
} else if (model == "M7") { ifelse(code == 1, 1, ifelse(code %in% c(2, 3), 2, 3))
} else if (model == "M8") { code
} else { NA_integer_ }
}
plot_df <- design %>%
mutate(level = purrr::map2_int(as.character(model), cond_code, assign_level)) %>%
mutate(condition = factor(condition, levels = names(cond_map)))
# ----- Nicer color palette (Set2) -----
model_cols <- setNames(
brewer.pal(8, "Set2"),   # soft, distinct, print-friendly
levels(plot_df$model)
)
# ----- Base plot -----
p <- ggplot(plot_df, aes(x = condition, y = level, group = 1, color = model)) +
# vertical separators between conditions
geom_vline(xintercept = c(1.5, 2.5, 3.5), color = "grey70", linewidth = 0.4) +
geom_line(linewidth = 1) +
geom_point(size = 3.8, stroke = 0.9) +
facet_grid(rows = vars(model), switch = "y") +
scale_y_continuous(
breaks = 1:4,
limits = c(0.8, 4.2),
expand = expansion(mult = c(0.08, 0.12))
) +
scale_x_discrete(labels = c("B","R","RB-","RB+")) +
scale_color_manual(values = model_cols, guide = "none") +
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(
strip.placement   = "outside",
strip.text.y.left = element_text(angle = 0, face = "bold", size = 12),
panel.grid        = element_blank(),
panel.spacing.y   = unit(0, "pt"),
panel.border      = element_rect(color = "grey70", fill = NA, linewidth = 0.5),
axis.text.x       = element_text(size = 13, colour = "black"),
axis.text.y       = element_text(size = 13, colour = "black"),
axis.title        = element_blank()
)
p
cond_map <- c("B" = 1, "R" = 2, "RB-" = 3, "RB+" = 4)
conditions <- enframe(cond_map, name = "condition", value = "cond_code")
# ----- Build tidy grid of Model × Condition -----
models <- tibble(
# reverse order: M8 (top) ... M1 (bottom)
model = factor(paste0("M", 8:1), levels = paste0("M", 8:1))
)
design <- tidyr::crossing(models, conditions)
# ----- Map each model to its level -----
assign_level <- function(model, code){
if (model == "M1") { ifelse(code == 1, 1, 2)
} else if (model == "M2") { ifelse(code == 2, 1, 2)
} else if (model == "M3") { ifelse(code == 4, 2, 1)
} else if (model == "M4") { ifelse(code <= 2, 1, 2)
} else if (model == "M5") { ifelse(code <= 2, 1, ifelse(code == 3, 2, 3))
} else if (model == "M6") { ifelse(code == 1, 1, ifelse(code == 2, 2, 3))
} else if (model == "M7") { ifelse(code == 1, 1, ifelse(code %in% c(2, 3), 2, 3))
} else if (model == "M8") { code
} else { NA_integer_ }
}
plot_df <- design %>%
mutate(level = purrr::map2_int(as.character(model), cond_code, assign_level)) %>%
mutate(condition = factor(condition, levels = names(cond_map)))
# ----- Palette: nicer colors (viridis discrete) -----
model_cols <- setNames(
viridisLite::viridis(8, option = "C"),   # option "C" gives distinct bright tones
levels(plot_df$model)
)
# ----- Base plot -----
p <- ggplot(plot_df, aes(x = condition, y = level, group = 1, color = model)) +
# vertical separators between conditions
geom_vline(xintercept = c(1.5, 2.5, 3.5), color = "grey70", linewidth = 0.4) +
geom_line(linewidth = 1) +
geom_point(size = 3.8, stroke = 0.9) +
facet_grid(rows = vars(model), switch = "y") +
scale_y_continuous(
breaks = 1:4,
limits = c(0.8, 4.2),
expand = expansion(mult = c(0.08, 0.12)),
position = "right"   # move y-axis ticks/labels to the right
) +
scale_x_discrete(labels = c("B","R","RB-","RB+")) +
scale_color_manual(values = model_cols, guide = "none") +
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(
strip.placement    = "outside",
strip.text.y.left  = element_text(angle = 0, face = "bold", size = 12),
panel.grid         = element_blank(),
panel.spacing.y    = unit(0, "pt"),
panel.border       = element_rect(color = "grey70", fill = NA, linewidth = 0.5),
axis.text.x        = element_text(size = 13, colour = "black"),
axis.text.y.right  = element_text(size = 13, colour = "black"), # right-side labels
axis.text.y.left   = element_blank(),  # remove left labels
axis.title         = element_blank()
)
p
p <- ggplot(plot_df, aes(x = condition, y = level, group = 1, color = model)) +
geom_vline(xintercept = c(1.5, 2.5, 3.5), color = "grey70", linewidth = 0.4) +
geom_line(linewidth = 1) +
geom_point(size = 3.8, stroke = 0.9) +
facet_grid(rows = vars(model), switch = "y") +
scale_y_continuous(
breaks = 1:4,
limits = c(0.8, 4.2),
expand = expansion(mult = c(0.08, 0.12)),
position = "right"   # move y-axis ticks/labels to the right
) +
scale_x_discrete(labels = c("B","R","RB-","RB+")) +
scale_color_manual(values = model_cols, guide = "none") +
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(
strip.placement    = "outside",
strip.text.y.left  = element_text(angle = 0, size = 18),
panel.grid         = element_blank(),
panel.spacing.y    = unit(0, "pt"),
panel.border       = element_rect(color = "grey70", fill = NA, linewidth = 0.5),
axis.text.x        = element_text(size = 18, colour = "black"),
axis.text.y.right  = element_text(size = 13, colour = "black"), # right-side labels
axis.text.y.left   = element_blank(),  # remove left labels
axis.title         = element_blank()
)
p
cond_map <- c("B" = 1, "R" = 2, "RB-" = 3, "RB+" = 4)
conditions <- enframe(cond_map, name = "condition", value = "cond_code")
# ----- Build tidy grid of Model × Condition -----
models <- tibble(
model = factor(paste0("M", 8:1), levels = paste0("M", 8:1))
)
design <- tidyr::crossing(models, conditions)
# ----- Map each model to its level -----
assign_level <- function(model, code){
if (model == "M1") { ifelse(code == 1, 1, 2)
} else if (model == "M2") { ifelse(code == 2, 1, 2)
} else if (model == "M3") { ifelse(code == 4, 2, 1)
} else if (model == "M4") { ifelse(code <= 2, 1, 2)
} else if (model == "M5") { ifelse(code <= 2, 1, ifelse(code == 3, 2, 3))
} else if (model == "M6") { ifelse(code == 1, 1, ifelse(code == 2, 2, 3))
} else if (model == "M7") { ifelse(code == 1, 1, ifelse(code %in% c(2, 3), 2, 3))
} else if (model == "M8") { code
} else { NA_integer_ }
}
plot_df <- design %>%
mutate(level = purrr::map2_int(as.character(model), cond_code, assign_level)) %>%
mutate(condition = factor(condition, levels = names(cond_map)))
model_cols <- setNames(
viridisLite::viridis(8, option = "C"),   # option "C" gives distinct bright tones
levels(plot_df$model)
)
p <- ggplot(plot_df, aes(x = condition, y = level, group = 1, color = model)) +
geom_vline(xintercept = c(1.5, 2.5, 3.5), color = "grey70", linewidth = 0.4) +
geom_line(linewidth = 1) +
geom_point(size = 3.8, stroke = 0.9) +
facet_grid(rows = vars(model), switch = "y") +
scale_y_continuous(
breaks = 1:4,
limits = c(0.8, 4.2),
expand = expansion(mult = c(0.08, 0.12)),
position = "right"   # move y-axis ticks/labels to the right
) +
scale_x_discrete(labels = c("B","R","RB-","RB+")) +
scale_color_manual(values = model_cols, guide = "none") +
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(
strip.placement    = "outside",
strip.text.y.left  = element_text(angle = 0, size = 18),
panel.grid         = element_blank(),
panel.spacing.y    = unit(0, "pt"),
panel.border       = element_rect(color = "grey70", fill = NA, linewidth = 0.5),
axis.text.x        = element_text(size = 18, colour = "black"),
axis.text.y.right  = element_text(size = 13, colour = "black"), # right-side labels
axis.text.y.left   = element_blank(),  # remove left labels
axis.title         = element_blank()
)
p
p <- ggplot(plot_df, aes(x = condition, y = level, group = 1, color = model)) +
geom_vline(xintercept = c(1.5, 2.5, 3.5), color = "grey70", linewidth = 0.4) +
geom_line(linewidth = 1) +
geom_point(size = 3, stroke = 0.9) +
facet_grid(rows = vars(model), switch = "y") +
scale_y_continuous(
breaks = 1:4,
limits = c(0.8, 4.2),
expand = expansion(mult = c(0.08, 0.12)),
position = "right"   # move y-axis ticks/labels to the right
) +
scale_x_discrete(labels = c("B","R","RB-","RB+")) +
scale_color_manual(values = model_cols, guide = "none") +
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(
strip.placement    = "outside",
strip.text.y.left  = element_text(angle = 0, size = 18),
panel.grid         = element_blank(),
panel.spacing.y    = unit(0, "pt"),
panel.border       = element_rect(color = "grey70", fill = NA, linewidth = 0.5),
axis.text.x        = element_text(size = 18, colour = "black"),
axis.text.y.right  = element_text(size = 13, colour = "black"), # right-side labels
axis.text.y.left   = element_blank(),  # remove left labels
axis.title         = element_blank()
)
ggplot(plot_df, aes(x = condition, y = level, group = 1, color = model)) +
geom_vline(xintercept = c(1.5, 2.5, 3.5), color = "grey70", linewidth = 0.4) +
geom_line(linewidth = 1) +
geom_point(size = 2, stroke = 0.9) +
facet_grid(rows = vars(model), switch = "y") +
scale_y_continuous(
breaks = 1:4,
limits = c(0.8, 4.2),
expand = expansion(mult = c(0.08, 0.12)),
position = "right"   # move y-axis ticks/labels to the right
) +
scale_x_discrete(labels = c("B","R","RB-","RB+")) +
scale_color_manual(values = model_cols, guide = "none") +
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(
strip.placement    = "outside",
strip.text.y.left  = element_text(angle = 0, size = 18),
panel.grid         = element_blank(),
panel.spacing.y    = unit(0, "pt"),
panel.border       = element_rect(color = "grey70", fill = NA, linewidth = 0.5),
axis.text.x        = element_text(size = 18, colour = "black"),
axis.text.y.right  = element_text(size = 13, colour = "black"), # right-side labels
axis.text.y.left   = element_blank(),  # remove left labels
axis.title         = element_blank()
)
ggplot(plot_df, aes(x = condition, y = level, group = 1, color = model)) +
geom_vline(xintercept = c(1.5, 2.5, 3.5), color = "grey70", linewidth = 0.4) +
geom_line(linewidth = 1) +
geom_point(size = 3, stroke = 0.9) +
facet_grid(rows = vars(model), switch = "y") +
scale_y_continuous(
breaks = 1:4,
limits = c(0.8, 4.2),
expand = expansion(mult = c(0.08, 0.12)),
position = "right"   # move y-axis ticks/labels to the right
) +
scale_x_discrete(labels = c("B","R","RB-","RB+")) +
scale_color_manual(values = model_cols, guide = "none") +
labs(x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(
strip.placement    = "outside",
strip.text.y.left  = element_text(angle = 0, size = 18),
panel.grid         = element_blank(),
panel.spacing.y    = unit(0, "pt"),
panel.border       = element_rect(color = "grey70", fill = NA, linewidth = 0.5),
axis.text.x        = element_text(size = 18, colour = "black"),
axis.text.y.right  = element_text(size = 13, colour = "black"), # right-side labels
axis.text.y.left   = element_blank(),  # remove left labels
axis.title         = element_blank()
)
level_cols <- c(
"1" = "#F3DA7D",
"2" = "#E9A061",
"3" = "#C2604F",
"4" = "#A13043"
)
ggplot(heat_df, aes(x = condition, y = model, fill = factor(level))) +
geom_tile(color = "white", linewidth = 0.4, alpha = 0.7), +
ggplot(heat_df, aes(x = condition, y = model, fill = factor(level))) +
geom_tile(color = "white", linewidth = 0.4, alpha = 0.7) +
geom_text(aes(label = level), size = 5) +
scale_fill_manual(
name = "Level",
values = level_cols
) +
theme_minimal(base_size = 18) +
theme(
legend.position = "right",
legend.justification = "top",
panel.grid = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x  = element_text(size = 18, colour = "black"),
axis.text.y  = element_text(size = 18, colour = "black"),
legend.text  = element_text(size = 18),
legend.title = element_text(size = 18)
)
rm(list = ls())
setwd("D:/OneDrive - Universitat de Barcelona/GitHub/beat-perception-speech/Data/data_analysis_R")
output_dir <- "D:/OneDrive - Universitat de Barcelona/GitHub/beat-perception-speech/Analysis/output_analysis"
RPI<- read.csv("RPIs.csv", header = TRUE, sep = ",")
library(lme4)
library(readr)
library(ggplot2)
library(lmerTest)
library(car)
library(interactions)
library(dplyr)
library(interactions)
library(MuMIn)
library(MASS)
library(fitdistrplus)
library(writexl)
library(svglite)
library(ggpattern)
RPI$info_index<- as.numeric(RPI$info_index)
RPI$participant <- as.factor(RPI$participant)
RPI$BMRQ_score<- as.numeric(RPI$BMRQ_score)
RPI$music_exp<- as.factor(RPI$music_exp)
RPI$n_lang<-as.numeric(RPI$n_lang)
RPI$block<- as.numeric(RPI$block)
RPI$syllable <- as.factor(RPI$syllable)
RPI$music_use<- as.factor(RPI$music_use)
RPI$n_lang<-as.numeric(RPI$n_lang)
RPI$n_lang_used<- as.numeric(RPI$n_lang_used)
RPI$ability_learn_l2<- as.numeric(RPI$ability_learn_l2)
RPI$tendence_mix_lan<- as.numeric(RPI$tendence_mix_lan)
RPI$partiture<- as.factor(RPI$partiture)
RPI$sex<- as.factor(RPI$sex)
RPI$age<- as.numeric(RPI$age)
RPI$hand<- as.factor(RPI$hand)
RPI$expName<- as.factor(RPI$expName)
RPI$group<-as.factor(RPI$group)
RPI$meanRTs<- as.numeric(RPI$meanRTs)
#1. summary stats
RPI <- RPI %>%
mutate(meanRTs_ms = meanRTs * 1000)
# Compute means and 95% CI for each condition-target combination
RPI_summary <- RPI %>%
group_by(condition, syllable) %>%
summarise(
mean_RT = mean(meanRTs_ms, na.rm = TRUE),
SE = sd(meanRTs_ms, na.rm = TRUE) / sqrt(n()),
CI = SE * 1.96,
.groups = "drop"
) %>%
mutate(
syllable = dplyr::recode(as.character(syllable),
"A" = "RPI-a",
"C" = "RPI-c"),
syllable = factor(syllable, levels = c("RPI-a", "RPI-c"))
)
pd <- position_dodge(width = 0.60)
pd <- position_dodge(width = 0.60)
ggplot(RPI_summary,
aes(x     = factor(condition),
y     = mean_RT,
fill  = syllable,    # fill by syllable
group = syllable)) +
geom_bar(stat     = "identity",
position = pd,
width    = 0.60,
colour   = "black",
alpha= 0.6) +   # keep black outline
geom_errorbar(aes(ymin = mean_RT - SE, ymax = mean_RT + SE),
position = pd, width = 0.20, linewidth = 0.8,
colour = "black") +
geom_hline(yintercept = 0, linetype = "dotted",
color = "gray30", linewidth = 0.8) +
geom_line(aes(colour = syllable),
position = pd, linetype = "longdash", linewidth = 0.8) +
# solid fills for bars
scale_fill_manual(values = c(
"RPI-a" = "#B71D3E",
"RPI-c" = "#3C8200"
)) +
scale_colour_manual(values = c(
"RPI-a" = "gray30",
"RPI-c" = "gray30"
)) +
labs(x      = NULL,
y      = "RPIs (ms)",
fill   = "RPI",
colour = "RPI") +
coord_cartesian(ylim = c(-12, 75)) +
theme_classic(base_size = 16) +
theme(
legend.position = c(0.15, 0.88),
legend.title    = element_text(size = 18),
legend.text     = element_text(size = 16),
axis.text.x     = element_text(size = 18, colour = "black"),
axis.text.y     = element_text(size = 18, colour = "black"),
axis.title      = element_text(size = 16)
)
