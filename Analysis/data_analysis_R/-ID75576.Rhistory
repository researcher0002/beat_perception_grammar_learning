ggplot(emm_df, aes(x = condition, y = response, group = target, color = target)) +
geom_point(position = pd, size = 3) +  # Disalign points slightly
geom_line(position = pd, linetype = "solid", linewidth = 1) +  # Line for each target
geom_errorbar(aes(ymin = response - SE, ymax = response + SE),
position = pd, width = 0.1) +  # Error bars (SEs)
labs(
y = "Predicted RTs (Gamma Model)",
caption = "Error bars represent ±1 SE") +
theme_classic() +  # Removes grid by default
theme(
legend.position = c(0.80, 0.95),  # Move legend higher and to the right (x, y in [0,1] scale)
legend.text = element_text(size = 14),  # Increase legend text size
legend.title = element_text(size = 14),  # Bigger and bold legend title
axis.text = element_text(size = 12),  # Larger axis labels
axis.title = element_text(size = 14)   # Emphasize axis titles
)
ggplot(emm_df, aes(x = condition, y = response, group = target, color = target)) +
geom_point(position = pd, size = 3) +  # Disalign points slightly
geom_line(position = pd, linetype = "solid", linewidth = 1) +  # Line for each target
geom_errorbar(aes(ymin = response - SE, ymax = response + SE),
position = pd, width = 0.1) +  # Error bars (SEs)
labs(
y = "Predicted RTs (Gamma Model)",
caption = "Error bars represent ±1 SE") +
theme_classic() +  # Removes grid by default
theme(
legend.position = c(0.95, 0.85),  # Move legend higher and to the right (x, y in [0,1] scale)
legend.text = element_text(size = 14),  # Increase legend text size
legend.title = element_text(size = 14),  # Bigger and bold legend title
axis.text = element_text(size = 12),  # Larger axis labels
axis.title = element_text(size = 14)   # Emphasize axis titles
)
ggplot(emm_df, aes(x = condition, y = response, group = target, color = target)) +
geom_point(position = pd, size = 3) +  # Disalign points slightly
geom_line(position = pd, linetype = "solid", linewidth = 1) +  # Line for each target
geom_errorbar(aes(ymin = response - SE, ymax = response + SE),
position = pd, width = 0.1) +  # Error bars (SEs)
labs(
y = "Predicted RTs (Gamma Model)",
caption = "Error bars represent ±1 SE") +
theme_classic() +  # Removes grid by default
theme(
legend.position = c(0.95, 0.85),  # Move legend higher and to the right (x, y in [0,1] scale)
legend.text = element_text(size = 14),  # Increase legend text size
legend.title = element_text(size = 14),  # Bigger and bold legend title
axis.text = element_text(size = 12),  # Larger axis labels
axis.title = element_text(size = 12)   # Emphasize axis titles
)
pd <- position_dodge(0.2)  # Adjusts the horizontal spread
ggplot(emm_df, aes(x = condition, y = response, group = target, color = target)) +
geom_point(position = pd, size = 4, shape = 16) +  # Larger dots, filled circles
geom_line(aes(linetype = target), position = pd, linewidth = 1.2) +  # Dashed lines for each target
geom_errorbar(aes(ymin = response - SE, ymax = response + SE),
position = pd, width = 0.1, linewidth = 1) +  # Slightly thicker error bars
labs(
y = "Predicted RTs (Gamma Model)",
caption = "Error bars represent ±1 SE") +
theme_classic() +  # Clean look
theme(
legend.position = c(0.95, 0.85),  # Move legend higher and to the right (x, y in [0,1] scale)
legend.text = element_text(size = 14),  # Increase legend text size
legend.title = element_text(size = 14),  # Bigger and bold legend title
axis.text = element_text(size = 12),  # Larger axis labels
axis.title = element_text(size = 12)   # Emphasize axis titles
) +
scale_linetype_manual(values = c("solid", "dashed", "dotted", "dotdash"))  # Custom linetypes for targets
pd <- position_dodge(0.2)  # Adjusts the horizontal spread
ggplot(emm_df, aes(x = condition, y = response, group = target)) +
geom_point(position = pd, size = 4, shape = 16) +  # Larger dots, filled circles
geom_line(aes(linetype = target), position = pd, linewidth = 1.2) +  # Dashed lines for each target
geom_errorbar(aes(ymin = response - SE, ymax = response + SE),
position = pd, width = 0.1, linewidth = 1) +  # Slightly thicker error bars
labs(
y = "Predicted RTs (Gamma Model)",
caption = "Error bars represent ±1 SE") +
theme_classic() +  # Clean look
theme(
legend.position = c(0.95, 0.85),  # Move legend higher and to the right (x, y in [0,1] scale)
legend.text = element_text(size = 12),  # Increase legend text size
legend.title = element_text(size = 12),  # Bigger and bold legend title
axis.text = element_text(size = 12),  # Larger axis labels
axis.title = element_text(size = 12)   # Emphasize axis titles
) +
scale_linetype_manual(values = c("solid", "dashed", "dotted", "dotdash"))  # Custom linetypes for targets
pd <- position_dodge(0.2)  # Adjusts the horizontal spread
ggplot(emm_df, aes(x = condition, y = response, group = target)) +
# Different colored markers with distinct shapes
geom_point(aes(color = target, shape = target), position = pd, size = 4) +
# Black lines with different dashes
geom_line(aes(linetype = target), position = pd, linewidth = 1.2, color = "black") +
# Error bars in black
geom_errorbar(aes(ymin = response - SE, ymax = response + SE),
position = pd, width = 0.1, linewidth = 1, color = "black") +
labs(
y = "Predicted RTs (Gamma Model)",
caption = "Error bars represent ±1 SE") +
theme_classic() +  # Clean look
theme(
legend.position = c(0.95, 0.85),  # Move legend higher and to the right (x, y in [0,1] scale)
legend.text = element_text(size = 12),  # Increase legend text size
legend.title = element_text(size = 12),  # Bigger and bold legend title
axis.text = element_text(size = 12),  # Larger axis labels
axis.title = element_text(size = 12)   # Emphasize axis titles
) +
scale_linetype_manual(values = c("solid", "dashed", "dotted", "dotdash")) +  # Custom linetypes for targets
scale_shape_manual(values = c(16, 17, 15, 18))  # Custom shapes for target level
pd <- position_dodge(0.2)  # Adjusts the horizontal spread
ggplot(emm_df, aes(x = condition, y = response, group = target)) +
# Different colored markers with distinct shapes
geom_point(aes(color = target, shape = target), position = pd, size = 4) +
# Black lines with different dashes, now thinner
geom_line(aes(linetype = target), position = pd, linewidth = 0.8, color = "black") +
# Error bars in black
geom_errorbar(aes(ymin = response - SE, ymax = response + SE),
position = pd, width = 0.1, linewidth = 0.8, color = "black") +
labs(
y = "Predicted RTs (Gamma Model)",
caption = "Error bars represent ±1 SE") +
theme_classic() +  # Clean look
theme(
legend.position = c(0.95, 0.85),  # Move legend higher and to the right (x, y in [0,1] scale)
legend.text = element_text(size = 12),  # Increase legend text size
legend.title = element_text(size = 12),  # Bigger and bold legend title
axis.text = element_text(size = 12),  # Larger axis labels
axis.title = element_text(size = 12)   # Emphasize axis titles
) +
scale_linetype_manual(values = c("solid", "dashed", "dotted", "dotdash")) +  # Custom linetypes for targets
scale_shape_manual(values = c(16, 17, 15, 18))  # Custom shapes for target levels
emmeans_model <- emmeans(model1, ~ syll_to_catch2 | condition)
emmeans_model2 <- emmeans(model2, ~ target | condition)
# Perform pairwise comparisons within each condition
within_condition_contrasts2 <- pairs(emmeans_model2)
# View the results for pairwise comparisons within each condition
summary(within_condition_contrasts2)
# Extract results as a dataframe
contrast_results <- as.data.frame(summary(within_condition_contrasts2))
# Apply FDR correction to p-values
contrast_results$FDR_p <- p.adjust(contrast_results$p.value, method = "fdr")
# Print the results with adjusted p-values
print(contrast_results)
rm(list = ls())
explicit<- read.csv(file.choose(), header = TRUE, sep = ",")
library(lme4)
library(readr)
library(lme4)
library(readr)
library(ggplot2)
library(lmerTest)
library(car)
library(interactions)
library(dplyr)
library(MuMIn)
library(effectsize)
library(lsr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ggpubr)
library(MASS)
library(fitdistrplus)
library(emmeans)
library(writexl)
library(brms)
#prepare the variables
explicit$condition_off<- as.factor(explicit$condition_off)
explicit$conds_test <- as.factor(explicit$conds_test)
explicit$rule_norule<-as.factor(explicit$rule_norule)
explicit$language<- as.factor(explicit$language)
explicit$accuracy_rts<- as.numeric(explicit$accuracy_rts)
explicit$rule_str <- as.factor(explicit$rule_str)
explicit$conf_answer<- as.numeric(explicit$conf_answer)
explicit$PLV_mean<- as.numeric(explicit$PLV_mean)
explicit$GSMI_PA_mean<- as.numeric(explicit$GSMI_PA_mean)
explicit$High_sync_prob<- as.numeric(explicit$High_sync_prob)
null_model <-glmer(accuracy  ~ 1 +(1|participant), family = binomial(link = "logit"),
data = explicit)
summary(null_model)
model1 <- glmer(accuracy ~ condition_off + (1|participant), family = binomial(link = "logit"),
data = explicit,control = glmerControl(optimizer = 'bobyqa', optCtrl = list(maxfun=100000)))
summary(model1)
anova(null_model, model1)
model2 <- glmer(accuracy ~ condition_off + PLV_mean+(1|participant), family = binomial(link = "logit"),
data = explicit,control = glmerControl(optimizer = 'bobyqa', optCtrl = list(maxfun=100000)))
summary(model2)
anova(model1, model2)
explicit_complete <- na.omit(explicit[, c("accuracy", "condition_off", "PLV_mean", "participant")])
model1 <- glmer(accuracy ~ condition_off + (1 | participant),
family = binomial, data = explicit_complete)
model2 <- glmer(accuracy ~ condition_off + PLV_mean + (1 | participant),
family = binomial, data = explicit_complete)
anova(model1, model2)
summary(model2)
model3 <- glmer(accuracy ~ condition_off*PLV_mean + (1 | participant),
family = binomial, data = explicit_complete)
summary(model3)
anova(model1, model3)
View(explicit)
explicit$High_sync_prob<- as.numeric(explicit$High_sync_prob)
View(explicit)
model2 <- glmer(accuracy ~ condition_off + High_sync_prob + (1 | participant),
family = binomial, data = explicit_complete)
View(explicit)
explicit_complete <- na.omit(explicit[, c("accuracy", "condition_off", "PLV_mean", "High_sync_prob","participant")])
model1 <- glmer(accuracy ~ condition_off + (1 | participant),
family = binomial, data = explicit_complete)
summary(model1)
model2 <- glmer(accuracy ~ condition_off + High_sync_prob + (1 | participant),
family = binomial, data = explicit_complete)
summary(model2)
anova(model1, model2)
model3 <- glmer(accuracy ~ condition_off*High_sync_prob + (1 | participant),
family = binomial, data = explicit_complete)
summary(model3)
anova(model1, model3)
rm(list = ls())
setwd("D:/OneDrive - Universitat de Barcelona/GitHub/beat-perception-speech/Data")
output_dir <- "D:/OneDrive - Universitat de Barcelona/GitHub/beat-perception-speech/Analysis/output_analysis"
RPI<- read.csv(file.choose(), header = TRUE, sep = ",")
setwd("C:Users/bianc/OneDrive - Universitat de Barcelona/GitHub/beat-perception-speech/Data")
output_dir <- "C:/Users/bianc/OneDrive - Universitat de Barcelona/GitHub/beat-perception-speech/Analysis/output_analysis"
RPI<- read.csv(file.choose(), header = TRUE, sep = ",")
RPI<- read.csv(file.choose(), header = TRUE, sep = ";")
RPI<- read.csv(file.choose(), header = TRUE, sep = ",")
library(lme4)
library(readr)
library(ggplot2)
library(lmerTest)
library(car)
library(interactions)
library(dplyr)
library(interactions)
library(MuMIn)
library(MASS)
library(fitdistrplus)
library(writexl)
RPI$info_index<- as.numeric(RPI$info_index)
RPI$participant <- as.factor(RPI$participant)
RPI$BMRQ_score<- as.numeric(RPI$BMRQ_score)
RPI$music_exp<- as.factor(RPI$music_exp)
RPI$n_lang<-as.numeric(RPI$n_lang)
RPI$block<- as.numeric(RPI$block)
RPI$syllable <- as.factor(RPI$syllable)
#dprime$age<- as.numeric(dprime$age)#it gives some NAs
RPI$sex<- as.factor(RPI$sex)
RPI$sex<- as.factor(RPI$sex)
RPI$age<- as.numeric(RPI$age)
RPI<- read.csv(file.choose(), header = TRUE, sep = ",")
library(lme4)
library(readr)
library(ggplot2)
library(lmerTest)
library(car)
library(interactions)
library(dplyr)
library(interactions)
library(MuMIn)
library(MASS)
library(fitdistrplus)
library(writexl)
RPI$info_index<- as.numeric(RPI$info_index)
RPI$participant <- as.factor(RPI$participant)
RPI$BMRQ_score<- as.numeric(RPI$BMRQ_score)
RPI$music_exp<- as.factor(RPI$music_exp)
RPI$n_lang<-as.numeric(RPI$n_lang)
RPI$block<- as.numeric(RPI$block)
RPI$syllable <- as.factor(RPI$syllable)
RPI$sex<- as.factor(RPI$sex)
RPI$age<- as.numeric(RPI$age)
RPI$hand<- as.factor(RPI$hand)
RPI$expName<- as.factor(RPI$expName)
RPI$group<-as.factor(RPI$group)
RPI$meanRTs<- as.numeric(RPI$meanRTs)
RPI <- RPI %>%
mutate(meanRTs_ms = meanRTs * 1000)
summary_stats <-RPI%>%
group_by(condition, syllable) %>%
get_summary_stats(meanRTs, type = "mean_sd")
output_path <- file.path(output_dir, "summary_stats_RPI_all.xlsx")
write_xlsx(summary_stats, output_path)
# Fit a normal distribution to the data
fit_normal <- fitdistr(RPI$meanRTs, "normal")
RPI$age<- as.numeric(RPI$age)
RPI$hand<- as.factor(RPI$hand)
RPI$expName<- as.factor(RPI$expName)
RPI$group<-as.factor(RPI$group)
RPI$meanRTs<- as.numeric(RPI$meanRTs)
RPI <- RPI %>%
mutate(meanRTs_ms = meanRTs * 1000)
summary_stats <-RPI%>%
group_by(condition, syllable) %>%
get_summary_stats(meanRTs, type = "mean_sd")
# Fit a normal distribution to the data
fit_normal <- fitdistr(RPI$meanRTs, "normal")
# Print the fit results
print(fit_normal)
# Plot histogram with fitted normal density
hist(RPI$meanRTs, breaks = 10, probability = TRUE, main = "Histogram of RTs with Normal Fit")
curve(dnorm(x, mean = fit_normal$estimate["mean"], sd = fit_normal$estimate["sd"]), col = "blue", lwd = 2, add = TRUE)
# Q-Q plot for normal distribution
qqnorm(RPI$meanRTs, main = "Q-Q Plot of RTs vs. Normal Distribution")
qqline(RPI$meanRTs, col = "red")
# Shapiro-Wilk test for normality
shapiro_test <- shapiro.test(RPI$meanRTs)
print(shapiro_test)
# Kolmogorov-Smirnov test for normal distribution
ks_test_normal <- ks.test(dprime$dprime, "pnorm", mean = fit_normal$estimate["mean"], sd = fit_normal$estimate["sd"])
print(ks_test_normal)
# Kolmogorov-Smirnov test for normal distribution
ks_test_normal <- ks.test(RPI$meanRTs, "pnorm", mean = fit_normal$estimate["mean"], sd = fit_normal$estimate["sd"])
print(ks_test_normal)
model <- lmer(meanRTs ~ info_index + (1 | participant), data = RPI)
# Summary of the model
summary(model)
model1 <- lmer(meanRTs ~ info_index + syllable+(1 | participant), data = RPI)
# Summary of the model
summary(model1)
anova(model,model1)
model2 <- lmer(meanRTs ~ info_index + syllable+ n_lang +(1 | participant), data = RPI)
# Summary of the model
summary(model2)
anova(model1,model2)
model2 <- lmer(meanRTs ~ info_index + syllable+ age +(1 | participant), data = RPI)
# Summary of the model
summary(model2)
anova(model1,model2)
model2 <- lmer(meanRTs ~ info_index + syllable+ sex +(1 | participant), data = RPI)
# Summary of the model
summary(model2)
anova(model1,model2)
model2 <- lmer(meanRTs ~ info_index + syllable+ BMRQ_score +(1 | participant), data = RPI)
# Summary of the model
summary(model2)
anova(model1,model2)
model2 <- lmer(meanRTs ~  sex +(1 | participant), data = RPI)
# Summary of the model
summary(model2)
model2 <- lmer(meanRTs ~ info_index + syllable+ sex +(1 | participant), data = RPI)
# Summary of the model
summary(model2)
anova(model1,model2)
model2 <- lmer(meanRTs ~ info_index*syllable+(1 | participant), data = RPI)
# Summary of the model
summary(model2)
anova(model1,model2)
rm(list = ls())
setwd("D:/OneDrive - Universitat de Barcelona/GitHub/beat-perception-speech/Data/data_analysis_R")
output_dir <- "D:/OneDrive - Universitat de Barcelona/GitHub/beat-perception-speech/Analysis/output_analysis"
implicit<- read.csv("ImplicitTestData.csv", header = TRUE, sep = ",")
implicit$condition<- as.factor(implicit$condition)
implicit$info_index<- as.numeric(implicit$info_index)
implicit$syll_to_catch2 <- as.factor(implicit$syll_to_catch2)
implicit$beat_no_beat<-as.factor(implicit$beat_no_beat)
implicit$BMRQ_score<- as.numeric(implicit$BMRQ_score)
implicit$music_exp<- as.factor(implicit$music_exp)
implicit$music_use<- as.factor(implicit$music_use)
implicit$n_lang<-as.numeric(implicit$n_lang)
implicit$n_lang_used<- as.numeric(implicit$n_lang_used)
implicit$ability_learn_l2<- as.numeric(implicit$ability_learn_l2)
implicit$tendence_mix_lan<- as.numeric(implicit$tendence_mix_lan)
implicit$partiture<- as.factor(implicit$partiture)
implicit$order_trial_on<- as.numeric(implicit$order_trial_on)
implicit$participant<- as.factor(implicit$participant)
implicit$catch_rtsTR<- as.numeric(implicit$catch_rtsTR)
implicit$group<- as.factor(implicit$group)
implicit$sex<- as.factor(implicit$sex)
implicit$hand<- as.factor(implicit$hand)
implicit$age<- as.numeric(implicit$age)
implicit$block<- as.numeric(implicit$block)
# Create a new variable with substitutions
implicit$target <- gsub("X1|X2", "X", implicit$syll_to_catch2)
implicit$target<- as.factor(implicit$target)
implicit <- implicit %>%
mutate(catch_rtsTR_ms = catch_rtsTR * 1000) #to ms
rm(list = ls())
setwd("D:/OneDrive - Universitat de Barcelona/GitHub/beat-perception-speech/Data/data_analysis_R")
output_dir <- "D:/OneDrive - Universitat de Barcelona/GitHub/beat-perception-speech/Analysis/output_analysis"
implicit<- read.csv("ImplicitTestData.csv", header = TRUE, sep = ",")
library(lme4)
library(readr)
library(ggplot2)
library(lmerTest)
library(interactions)
library(dplyr)
library(ggpubr)
library(rstatix)
library(fitdistrplus)
library(emmeans)
library(ggeffects)
library(writexl)
library(gghalves)
#prepare the variables
implicit$condition<- as.factor(implicit$condition)
implicit$info_index<- as.numeric(implicit$info_index)
implicit$syll_to_catch2 <- as.factor(implicit$syll_to_catch2)
implicit$beat_no_beat<-as.factor(implicit$beat_no_beat)
implicit$BMRQ_score<- as.numeric(implicit$BMRQ_score)
implicit$music_exp<- as.factor(implicit$music_exp)
implicit$music_use<- as.factor(implicit$music_use)
implicit$n_lang<-as.numeric(implicit$n_lang)
implicit$n_lang_used<- as.numeric(implicit$n_lang_used)
implicit$ability_learn_l2<- as.numeric(implicit$ability_learn_l2)
implicit$tendence_mix_lan<- as.numeric(implicit$tendence_mix_lan)
implicit$partiture<- as.factor(implicit$partiture)
implicit$order_trial_on<- as.numeric(implicit$order_trial_on)
implicit$participant<- as.factor(implicit$participant)
implicit$catch_rtsTR<- as.numeric(implicit$catch_rtsTR)
implicit$group<- as.factor(implicit$group)
implicit$sex<- as.factor(implicit$sex)
implicit$hand<- as.factor(implicit$hand)
implicit$age<- as.numeric(implicit$age)
implicit$block<- as.numeric(implicit$block)
# Create a new variable with substitutions
implicit$target <- gsub("X1|X2", "X", implicit$syll_to_catch2)
implicit$target<- as.factor(implicit$target)
implicit <- implicit %>%
mutate(catch_rtsTR_ms = catch_rtsTR * 1000) #to ms
beat_eff<-implicit[(implicit$condition != "R") & (implicit$target== "X"),]
beat_eff_summary <- implicit %>%
filter(condition != "R", target == "X") %>%
group_by(participant, beat_no_beat) %>%
summarise(mean_rts = mean(catch_rtsTR_ms, na.rm = TRUE), .groups = "drop")
mean_summary <- beat_eff_summary %>%
group_by(beat_no_beat) %>%
summarise(mean_rt = mean(mean_rts, na.rm = TRUE), .groups = "drop")
ggplot(beat_eff_summary,
aes(x = beat_no_beat, y = mean_rts, fill = beat_no_beat)) +
geom_half_violin(side = "r", alpha = 0.6, color = NA) +
geom_point(data = mean_summary,
aes(x = beat_no_beat, y = mean_rt),
shape = 23,
size = 4,
fill = "black",
color = "white",
stroke = 1.2) +
# Optionally add error bars (e.g., SD or CI) if desired
# geom_errorbar(data = mean_summary,
#              aes(x = beat_no_beat, ymin = mean_rt - sd, ymax = mean_rt + sd),
#              width = 0.15)
geom_half_point(
side = "l",
shape = 21,
size = 2,
alpha = 0.9,
fill = "white",
color = "black"
) +
scale_fill_manual(values = c(
"no_beat" = "grey80",   # light grey
"beat"    = "grey20"    # dark grey
)) +
scale_x_discrete(
labels = c("no_beat" = "No beat", "beat" = "Beat"),
expand = expansion(mult = c(0, 0))
) +
coord_cartesian(ylim = c(400, 1000)) +
labs(x = NULL, y = "Mean RTs (ms)") +
theme_minimal(base_size = 16) +
theme(
legend.position  = "none",
panel.grid       = element_blank(),
panel.background = element_blank(),
plot.background  = element_blank(),
axis.line        = element_line(color = "black"),
axis.text        = element_text(size = 18, color = "black"),
axis.title.y     = element_text(size = 18, margin = margin(r = 10))
)
ggplot(beat_eff_summary,
aes(x = beat_no_beat, y = mean_rts, fill = beat_no_beat)) +
geom_line(aes(group=participant),color= "grey60", alpha=0.6,linewidth= 0.4)
ggplot(beat_eff_summary,
aes(x = beat_no_beat, y = mean_rts, fill = beat_no_beat)) +
geom_line(aes(group=participant),color= "grey60", alpha=0.6,linewidth= 0.4)+
geom_half_violin(side = "r", alpha = 0.6, color = NA) +
geom_point(data = mean_summary,
aes(x = beat_no_beat, y = mean_rt),
shape = 23,
size = 4,
fill = "black",
color = "white",
stroke = 1.2) +
# Optionally add error bars (e.g., SD or CI) if desired
# geom_errorbar(data = mean_summary,
#              aes(x = beat_no_beat, ymin = mean_rt - sd, ymax = mean_rt + sd),
#              width = 0.15)
geom_half_point(
side = "l",
shape = 21,
size = 2,
alpha = 0.9,
fill = "white",
color = "black"
) +
scale_fill_manual(values = c(
"no_beat" = "grey80",   # light grey
"beat"    = "grey20"    # dark grey
)) +
scale_x_discrete(
labels = c("no_beat" = "No beat", "beat" = "Beat"),
expand = expansion(mult = c(0, 0))
) +
coord_cartesian(ylim = c(400, 1000)) +
labs(x = NULL, y = "Mean RTs (ms)") +
theme_minimal(base_size = 16) +
theme(
legend.position  = "none",
panel.grid       = element_blank(),
panel.background = element_blank(),
plot.background  = element_blank(),
axis.line        = element_line(color = "black"),
axis.text        = element_text(size = 18, color = "black"),
axis.title.y     = element_text(size = 18, margin = margin(r = 10))
)
